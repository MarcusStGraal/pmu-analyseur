#!/bin/bash
# deploy-and-verify.sh - Script de d√©ploiement avec v√©rifications

set -e  # Arr√™ter en cas d'erreur

SERVICE_URL="https://pmu-analyseur-new.onrender.com"
TIMEOUT=300  # 5 minutes timeout
RETRY_DELAY=10

echo "üöÄ D√©marrage du processus de d√©ploiement..."

# Fonction pour v√©rifier la sant√© du service
check_health() {
    local url=$1
    echo "üîç V√©rification de $url..."
    
    response=$(curl -s -w "%{http_code}" -o /dev/null "$url/health" --max-time 30) || return 1
    
    if [ "$response" = "200" ]; then
        echo "‚úÖ Service accessible"
        return 0
    else
        echo "‚ùå Service non accessible (HTTP $response)"
        return 1
    fi
}

# Fonction pour r√©veiller le service
wake_service() {
    echo "‚è∞ R√©veil du service..."
    response=$(curl -s -w "%{http_code}" -o /dev/null "$SERVICE_URL/wake" --max-time 30) || return 1
    
    if [ "$response" = "200" ]; then
        echo "‚úÖ Service r√©veill√©"
        return 0
    else
        echo "‚ùå √âchec du r√©veil (HTTP $response)"
        return 1
    fi
}

# Fonction pour tester la fonctionnalit√© de pr√©diction
test_prediction() {
    echo "üß† Test de la pr√©diction..."
    
    payload='{"strategie":3,"cotes":[2.5,4.1,6.0],"indices_forme":[5.5,6.2,7.1],"gains_par_course":[1200,800,600]}'
    
    response=$(curl -s -X POST "$SERVICE_URL/predict-dutching" \
        -H "Content-Type: application/json" \
        -d "$payload" \
        --max-time 45)
    
    if echo "$response" | grep -q "gainNet"; then
        echo "‚úÖ Test de pr√©diction r√©ussi"
        echo "üìä R√©ponse: $(echo "$response" | jq -r '.decision // "Format inattendu"' 2>/dev/null || echo "Format inattendu")"
        return 0
    else
        echo "‚ùå Test de pr√©diction √©chou√©"
        echo "Response: $response"
        return 1
    fi
}

# Fonction pour v√©rifier les m√©triques
check_metrics() {
    echo "üìä V√©rification des m√©triques..."
    
    response=$(curl -s "$SERVICE_URL/metrics" --max-time 30)
    
    if echo "$response" | grep -q "timestamp"; then
        echo "‚úÖ M√©triques accessibles"
        uptime=$(echo "$response" | jq -r '.uptime // 0' 2>/dev/null || echo "0")
        echo "‚è±Ô∏è Uptime: ${uptime}s"
        return 0
    else
        echo "‚ùå M√©triques non accessibles"
        return 1
    fi
}

# Boucle principale de v√©rification
main() {
    local start_time=$(date +%s)
    local max_time=$((start_time + TIMEOUT))
    
    echo "üéØ URL cible: $SERVICE_URL"
    echo "‚è∞ Timeout: ${TIMEOUT}s"
    
    # Premi√®re tentative de r√©veil
    wake_service || echo "‚ö†Ô∏è R√©veil initial √©chou√©, continuation..."
    
    while [ $(date +%s) -lt $max_time ]; do
        echo -e "\n--- Tentative $(date '+%H:%M:%S') ---"
        
        # V√©rifier la sant√©
        if check_health "$SERVICE_URL"; then
            echo "‚úÖ Service op√©rationnel"
            
            # Tester les fonctionnalit√©s
            if test_prediction && check_metrics; then
                echo -e "\nüéâ D√âPLOIEMENT R√âUSSI ! üéâ"
                echo "üìà Service enti√®rement fonctionnel"
                
                # Statistiques finales
                local total_time=$(($(date +%s) - start_time))
                echo "‚è±Ô∏è Temps total: ${total_time}s"
                
                exit 0
            else
                echo "‚ö†Ô∏è Service accessible mais fonctionnalit√©s partiellement d√©faillantes"
            fi
        else
            echo "üîÑ Service non accessible, r√©veil..."
            wake_service || echo "‚ö†Ô∏è R√©veil √©chou√©"
        fi
        
        echo "‚è≥ Attente de ${RETRY_DELAY}s avant nouvelle tentative..."
        sleep $RETRY_DELAY
    done
    
    echo -e "\n‚ùå D√âPLOIEMENT √âCHOU√â apr√®s ${TIMEOUT}s"
    echo "üîß V√©rifiez les logs sur Render"
    exit 1
}

# Gestion des signaux
trap 'echo "‚èπÔ∏è Arr√™t du script"; exit 1' INT TERM

# Lancement principal
main

# Usage du script :
# chmod +x deploy-and-verify.sh
# ./deploy-and-verify.sh